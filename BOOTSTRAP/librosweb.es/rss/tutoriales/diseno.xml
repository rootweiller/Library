<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    >
    <channel>
        <title>Tutoriales de diseño</title>
        <description>Tutoriales sobre diseño y programación web (HTML, CSS, JavaScript y PHP).</description>

        <atom:link href="http://librosweb.es/rss/tutoriales/diseno.xml" rel="self" type="application/rss+xml" />
        <link>http://librosweb.es/</link>

        <language>es</language>

        <pubDate>Fri, 19 Jun 2015 22:30:43 +0200</pubDate>
        <lastBuildDate>Fri, 19 Jun 2015 22:30:43 +0200</lastBuildDate>
        <sy:updatePeriod>daily</sy:updatePeriod>
        <sy:updateFrequency>1</sy:updateFrequency>

        <generator>http://symfony.com/</generator>

        <image>
            <url>http://librosweb.es/apple-touch-icon.png</url>
            <title>LibrosWeb</title>
            <link>http://librosweb.es/</link>
        </image>

        <atom:link rel="search" type="application/opensearchdescription+xml" href="http://librosweb.es/opensearch/documentation.xml" title="LibrosWeb" />

                    <item>
        <title><![CDATA[ Cómo mostrar imágenes pixeladas con CSS 3 ]]></title>
        <link>http://librosweb.es/tutorial/como-mostrar-imagenes-pixeladas-con-css-3/</link>
        <description><![CDATA[
            <p>Las imágenes son una de las partes más importantes del diseño web. Normalmente dejamos que sean los navegadores los que redimensionen y escalen las imágenes para que encajen bien en el diseño y se vean lo mejor posible. No obstante, en ocasiones es mejor controlar explícitamente cómo se escalan las imágenes.</p>
<p>Por ese motivo, la versión 41 de Google Chrome añadió soporte para el nuevo valor <code>pixelated</code> de la propiedad <code>image-rendering</code> de CSS 3. Gracias a esta propiedad, podrás definir el algoritmo utilizado para ampliar las imágenes.</p>
<p>En concreto, el valor <code>pixelated</code> permite <strong>desactivar el suavizado de imágenes</strong> cuando se amplia su tamaño. Este suavizado normalmente se realiza mediante una interpolación bilineal. El valor <code>pixelated</code> hace que el algoritmo utilizado sea el denominado <em>"nearest neighbor"</em>, que consigue imágenes perfectamente pixeladas (más adelante verás por qué a veces nos interesan las imágenes pixeladas en vez de suavizadas).</p>
<p>La siguiente imagen muestra el resultado de ampliar una imagen pequeña mediante el algoritmo por defecto de los navegadores:</p>
<p><img alt="Imagen escalada y suavizada" src="http://librosweb.es/img/tutoriales/image-rendering-pixelated/imagen-suavizada.png" /></p>
<p>Utilizando el algoritmo asociado al valor <code>pixelated</code>, el resultado de ampliar la misma imagen es el siguiente:</p>
<p><img alt="Imagen escalada y pixelada" src="http://librosweb.es/img/tutoriales/image-rendering-pixelated/imagen-pixelada.png" /></p>
<p>Para aplicar este algoritmo, simplemente utiliza la propiedad <code>image-rendering</code> con el nuevo valor <code>pixelated</code>:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> <span class="kw3">style</span><span class="sy0">=</span><span class="st0">&quot;image-rendering: pixelated;&quot;</span> <span class="kw3">width</span><span class="sy0">=</span><span class="st0">&quot;100&quot;</span> <span class="kw3">height</span><span class="sy0">=</span><span class="st0">&quot;100&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;...&quot;</span>&gt;</span></pre>
<p>Si tu navegador es Google Chrome 41 u Opera 26, puedes <a href="https://googlechrome.github.io/samples/image-rendering-pixelated/index.html">probar la demo del funcionamiento de esta propiedad</a>.</p>
<p>Además de las imágenes, esta propiedad se puede aplicar también a los siguientes elementos:</p>
<ul>
<li><code>&lt;canvas&gt;</code></li>
<li>cualquier elemento con una propiedad <code>background-image</code></li>
</ul>
<h2>¿Cuándo es útil mostrar las imágenes pixeladas?</h2>
<p>Obviamente, si tu sitio incluye fotografías, nunca deberías aplicar esta propiedad porque se verían muy mal.</p>
<p>El primer caso de uso de esta propiedad son los juegos, ya que normalmente redimensionas el elemento <code>&lt;canvas&gt;</code> del juego para que ocupe toda la anchura del navegador. Antes el juego podía llegar a verse ligeramente borroso al ampliar la imagen, pero ahora se verá perfecto.</p>
<p>El otro caso de uso más útil es el de las aplicaciones que muestran códigos QR, códigos de barras y gráficos similares. En estas aplicaciones es normal que el usuario amplie la imagen del código hasta ocupe toda la pantalla del móvil, así que es muy importante mantener la pixelación de la imagen para que se reconozca el código sin problemas.</p>
<p>Esta es la imagen de un código QR ampliado y suavizado:</p>
<img src="http://librosweb.es/img/tutoriales/image-rendering-pixelated/codigo-qr.png" width="280" height="280">
<p>Esta es la imagen de un código QR ampliado y pixelado (sólo lo verás bien en Google Chrome 41 y Opera 26):</p>
<img src="http://librosweb.es/img/tutoriales/image-rendering-pixelated/codigo-qr.png" style="image-rendering: pixelated;" width="280" height="280">
<h2>Recursos útiles</h2>
<ul>
<li><a href="http://dev.w3.org/csswg/css-images-3/#the-image-rendering">Especificación oficial de la propiedad image-rendering</a></li>
</ul>
<h2>Sobre el autor</h2>
<p>Este artículo fue publicado originalmente por <strong>Paul Kinlan</strong> y ha sido traducido con permiso por <a href="https://github.com/javiereguiluz">Javier Eguiluz</a>.</p>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/como-mostrar-imagenes-pixeladas-con-css-3/</guid>
        <pubDate>Thu, 12 Feb 2015 00:00:00 +0100</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[css]]></category>
            </item>
        <item>
        <title><![CDATA[ El nuevo elemento &lt;picture&gt; de HTML5 para crear imágenes responsive ]]></title>
        <link>http://librosweb.es/tutorial/el-nuevo-elemento-picture-de-html5-para-crear-imagenes-responsive/</link>
        <description><![CDATA[
            <p>El nuevo elemento <code>&lt;picture&gt;</code> de HTML5 permite describir con todo detalle cómo deben cargarse las imágenes de tu sitio web. Ya no serán necesarios los <em>hacks</em> de CSS o JavaScript para gestionar las imágenes responsive de los diseños web. Además, los usuarios se aprovecharán de las ventajas de cargar solamente las imágenes optimizadas para el dispositivo que están utilizando, lo que es especialmente útil para usuarios con móviles y conexiones lentas a Internet.</p>
<p>Al margen de los nuevos atributos <code>srcset</code> y <code>sizes</code> definidos recientemente para los elementos <code>&lt;img&gt;</code>, el nuevo elemento <code>&lt;picture&gt;</code> permite una mayor flexibilidad al especificar qué imágenes utiliza el sitio. Gracias a este elemento <code>&lt;picture&gt;</code>, será posible escribir código HTML <em>limpio</em> y semántico, dejando que el navegador haga todo el trabajo de seleccionar la mejor imagen para cada situación.</p>
<p>La elección del mejor archivo de imagen depende de muchos factores:</p>
<dl>
<dt>Elección basada en el diseño gráfico</dt>
<dd>¿El dispositivo es un móvil en vertical o es un monitor panorámico? <a href="#toc-art-direction">Carga la mejor imagen optimizada para el tamaño de la pantalla.</a></dd>
<dt>Elección basada en la densidad de píxeles</dt>
<dd>¿Se trata de un dispositivo de alta resolución? <a href="#toc-pixel-density-descriptors">Carga las imágenes de alta resolución.</a></dd>
<dt>Elección basada en cómo se visualizará la imagen</dt>
<dd>¿La imagen debe ocupar siempre un tamaño determinado de la ventana del navegador? <a href="#toc-width-descriptors">Carga las imágenes en función del tamaño de la ventana del navegador.</a></dd>
<dt>Elección basada en el formato de la imagen</dt>
<dd>¿Soporta el navegador formatos de imagen con mucha mayor compresión que los tradicionales? <a href="#toc-file-type">Carga un formato de imagen alternativo, como por ejemplo WebP.</a></dd>
</dl>
<h2 id="toc-art-direction">Seleccionando la imagen en función de criterios artísticos</h2>
<p>El uso más habitual del elemento <code>&lt;picture&gt;</code> consiste en elegir la mejor imagen exclusivamente en función de criterios artísticos. En vez de diseñar una única imagen que se escala para ajustarse al tamaño de la ventana del navegador, se pueden diseñar diferentes imágenes en función de su tamaño.</p>
<p><img alt="Una única imagen escalada para que encaje en diferentes tamaños de ventana" src="http://librosweb.es/img/tutoriales/imagenes-responsive-con-elemento-picture/resized-image.png" />
<img alt="Diferentes imágenes diseñadas especialmente para cada tamaño de ventana" src="http://librosweb.es/img/tutoriales/imagenes-responsive-con-elemento-picture/art-direction.png" /></p>
<p><strong>Izquierda:</strong> la misma imagen se escala para todos los tamaños de ventana. <strong>Derecha:</strong> diferentes imágenes en función del tamaño de la ventana del navegador.</p>
<h2 id="improve-performance">Mejorando el rendimiento al cargar las imágenes</h2>
<p>Cuando se utiliza el nuevo elemento <code>&lt;picture&gt;</code> o el elemento <code>&lt;img&gt;</code> con los atributos <code>srcset</code> y <code>sizes</code>, el navegador solamente descarga la imagen adecuada para el navegador y las condiciones de acceso del usuario (tamaño del navegador, densidad en píxeles de la pantalla, formatos soportados por el navegador, etc.) La ventaja de que este comportamiento sea nativo del navegador es que se pueden aprovechar todas las funcionalidades de los navegadores, como la caché de contenidos y la precarga de imágenes.</p>
<h3 id="toc-demo">El elemento <picture> en acción</h3>
<p>Como sabes, Internet se inventó para mostrar fotos de gatitos, así que vamos a utilizar el elemento <code>&lt;picture&gt;</code> en acción mostrando cómo se ajusta nuestro gato al espacio disponible en el navegador.</p>
<p><a href="http://googlechrome.github.io/samples/picture-element/"><img alt="Una imagen de un gato estirándose" src="http://librosweb.es/img/tutoriales/imagenes-responsive-con-elemento-picture/cat-stretching.png" /></a></p>
<p><strong><a href="http://googlechrome.github.io/samples/picture-element/">Abrir la demo en una nueva pestaña del navegador</a></strong>. Para ver el elemento <code>&lt;picture&gt;</code> en acción, asegúrate de utilizar el navegador Chrome 38 y redimensiona la ventana del navegador para observar cómo cambia la imagen mostrada.</p>
<p>Esta demo es muy básica porque es una primera toma de contacto con las posibilidades del nuevo elemento <code>&lt;picture&gt;</code>. Sigue leyendo para conocer todas sus posibilidades.</p>
<h2>La sintaxis del elemento <code>&lt;picture&gt;</code></h2>
<p>El siguiente código HTML y CSS muestra todo lo necesario para crear la anterior demo:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">style</span>&gt;</span>
  img {display: block; margin: 0 auto;}
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">style</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;picture&gt;</span>
  <span class="sc2">&lt;<span class="kw2">source</span></span>
<span class="sc2">    <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;(min-width: 650px)&quot;</span></span>
<span class="sc2">    srcset<span class="sy0">=</span><span class="st0">&quot;images/kitten-stretching.png&quot;</span>&gt;</span>
  <span class="sc2">&lt;<span class="kw2">source</span></span>
<span class="sc2">    <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;(min-width: 465px)&quot;</span></span>
<span class="sc2">    srcset<span class="sy0">=</span><span class="st0">&quot;images/kitten-sitting.png&quot;</span>&gt;</span>
  <span class="sc2">&lt;<span class="kw2">img</span></span>
<span class="sc2">    <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;images/kitten-curled.png&quot;</span></span>
<span class="sc2">    <span class="kw3">alt</span><span class="sy0">=</span><span class="st0">&quot;a cute kitten&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span>picture&gt;</span></pre>
<p>Como puedes ver, no se utiliza ni código JavaScript ni ninguna otra librería externa. El bloque de código CSS se utiliza para aplicar unos estilos básicos a la imagen y de nuevo puedes ver que no se utilizan <em>hacks</em> ni <em>media queries</em>. Cuando el navegador soporta el elemento <code>&lt;picture&gt;</code>, tu único trabajo consiste en definir todas las imágenes <em>responsive</em> que tienes disponibles y es el navegador el que se encarga de seleccionar la mejor alternativa.</p>
<h2 id="toc-source-element">Uso de <code>&lt;picture&gt;</code> con los elementos <code>&lt;source&gt;</code></h2>
<p>El elemento <code>&lt;picture&gt;</code> no define ningún atributo propio, pero puedes conseguir comportamientos muy avanzados cuando utilizas <code>&lt;picture&gt;</code> para encerrar a varios elementos <code>&lt;source&gt;</code>.</p>
<p>El elemento <code>&lt;source&gt;</code>, que se utiliza para cargar elementos multimedia como audios y vídeos, se ha actualizado para que también soporte la carga de imágenes. Para ello, se le han añadido los siguientes atributos:</p>
<h3>Atributo <code>srcset</code> <em>(obligatorio)</em></h3>
<p>Indica la ruta de la imagen a la que se hace referencia (ejemplo <code>srcset="kitten.png"</code>).</p>
<p>También se puede indicar una lista de rutas separadas por comas y que incluyan el sufijo que indica la densidad de píxeles (ejemplo <code>srcset="kitten.png, kitten@2X.png 2x"</code>). Para la densidad de píxeles normales de <code>1</code> no hace falta añadir el descriptor <code>1x</code>.</p>
<p>Lee la sección <em><a href="#toc-pixel-density-descriptors">Seleccionando la imagen en función de la densidad de píxeles</a></em> para saber cómo utilizarlo en la práctica.</p>
<h3>Atributo <code>media</code> <em>(opcional)</em></h3>
<p>Permite indicar cualquier <em>media query</em> que sea válido en el selector <code>@media</code> de CSS (ejemplo <code>media="(max-width: 30em)"</code>).</p>
<h3>Atributo <code>sizes</code> <em>(opcional)</em></h3>
<p>Acepta cualquier valor que describa la anchura de la imagen (ejemplo <code>sizes="100vw"</code>) o un <em>media query</em> que defina la anchura de la imagen (ejemplo <code>sizes="(max-width: 30em) 100vw"</code>).</p>
<p>También se puede indicar una lista ed <em>media queries</em> separadas por comas y que describan varias anchuras de la imagen (ejemplo <code>sizes="(max-width: 30em) 100vw, (max-width: 50em) 50vw, calc(33vw - 100px)"</code>). En este caso se utiliza por defecto el último de los valores definidos.</p>
<h3>Atributo <code>type</code> <em>(opcional)</em></h3>
<p>Acepta como valor cualquier tipo MIME estándar (ejemplo <code>type="image/webp"</code> o <code>type="image/vnd.ms-photo"</code>).</p>
<p>Lee la sección <em><a href="#toc-file-type">Seleccionando diferentes formatos de imagen</a></em> para saber cómo utilizarlo en la práctica.</p>
<p>El navegador utiliza el valor de todos los atributos anteriores para determinar qué imagen se debe cargar de entre todas las variantes definidas. Ten en cuenta que <strong>el orden de las etiquetas es muy importante</strong>, ya que el navegador siempre utilizará el primer elemento <code>&lt;source&gt;</code> cuyas condiciones cumpla el navegador e ignorará el resto de elementos <code>&lt;source&gt;</code>.</p>
<h2 id="toc-add-img">Añade un elemento <code>&lt;img&gt;</code> al final</h2>
<p>El elemento <code>&lt;img&gt;</code> también se ha actualizado para poder utilizarlo dentro del elemento <code>&lt;picture&gt;</code> a modo de salvaguarda en el caso de que el navegador no soporte <code>&lt;picture&gt;</code> o ninguna de las condiciones de los elementos <code>&lt;source&gt;</code> se cumplan.</p>
<p>Añadir un elemento <code>&lt;img&gt;</code> dentro del elemento <code>&lt;picture&gt;</code> <strong>es obligatorio</strong>. Si no lo haces, <strong>el navegador no mostrará ninguna imagen</strong>.</p>
<p>La imagen definida por el elemento <code>&lt;img&gt;</code> será la que utilizará el elemento <code>&lt;picture&gt;</code> por defecto cuando no se puede mostrar ninguna otra de las imágenes definidas. Coloca el elemento <code>&lt;img&gt;</code> como último elemento hijo de <code>&lt;picture&gt;</code>, ya que los navegadores ignoran cualquier elemento <code>&lt;source&gt;</code> que se encuentre después de la etiqueta <code>&lt;img&gt;</code>. Si defines un texto alternativo para la imagen mediante el atributo <code>alt</code>, asegúrate de añadir ese atributo en la etiqueta <code>&lt;img&gt;</code>, no en <code>&lt;source&gt;</code> o <code>&lt;picture&gt;</code>.</p>
<h2 id="toc-pixel-density-descriptors">Seleccionando la imagen en función de la densidad de píxeles</h2>
<p>Utiliza los descriptores <code>1x</code>, <code>1.5x</code>, <code>2x</code> y <code>3x</code> para añadir soporte para pantallas de alta densidad de píxeles, como por ejemplo las de los <em>smartphones</em>. El atributo <code>srcset</code> que permite indicar estos descriptores ahora se soporta tanto en el elemento <code>&lt;img&gt;</code> como en los elementos <code>&lt;source&gt;</code>.</p>
<p>El siguiente ejemplo muestra cómo soportar las pantallas de tipo <code>1x</code>, <code>1.5x</code> y <code>2.x</code>:</p>
<pre class="html5 code"><span class="sc2">&lt;picture&gt;</span>
  <span class="sc2">&lt;<span class="kw2">source</span></span>
<span class="sc2">    <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;(min-width: 650px)&quot;</span></span>
<span class="sc2">    srcset<span class="sy0">=</span><span class="st0">&quot;images/kitten-stretching.png,</span>
<span class="sc2">            images/kitten-stretching@1.5x.png 1.5x,</span>
<span class="sc2">            images/kitten-stretching@2x.png 2x&quot;</span>&gt;</span>
  <span class="sc2">&lt;<span class="kw2">source</span></span>
<span class="sc2">    <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;(min-width: 465px)&quot;</span></span>
<span class="sc2">    srcset<span class="sy0">=</span><span class="st0">&quot;images/kitten-sitting.png,</span>
<span class="sc2">            images/kitten-sitting@1.5x.png 1.5x</span>
<span class="sc2">            images/kitten-sitting@2x.png 2x&quot;</span>&gt;</span>
  <span class="sc2">&lt;<span class="kw2">img</span></span>
<span class="sc2">    <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;images/kitten-curled.png&quot;</span></span>
<span class="sc2">    srcset<span class="sy0">=</span><span class="st0">&quot;images/kitten-curled@1.5x.png 1.5x,</span>
<span class="sc2">            images/kitten-curled@2x.png 2x&quot;</span></span>
<span class="sc2">    <span class="kw3">alt</span><span class="sy0">=</span><span class="st0">&quot;a cute kitten&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span>picture&gt;</span></pre>
<h2 id="toc-width-descriptors">Seleccionando la imagen en función de su anchura</h2>
<p>Cuando se desconoce el tamaño definitivo de una imagen, no es posible indicar el descriptor relacionado con la densidad de píxeles mencionado en la sección anterior. Así que en vez de definir imágenes de anchura fija, se puede añadir un descriptor de su anchura para que el navegador calcule automáticamente la densidad de píxeles y así descargue la mejor imagen en cada caso.</p>
<p>En este ejemplo se utiliza el atributo <code>sizes</code> para definir que la imagen siempre ocupe el 80% de la anchura de la ventana del navegador. Además, se combina con el atributo <code>srcset</code> para definir cuatro versiones diferentes de la misma foto de un faro, cada una con una anchura específica: 160px, 320px, 640px y 1280px:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;lighthouse-160.jpg&quot;</span> <span class="kw3">alt</span><span class="sy0">=</span><span class="st0">&quot;lighthouse&quot;</span></span>
<span class="sc2">     sizes<span class="sy0">=</span><span class="st0">&quot;80vw&quot;</span></span>
<span class="sc2">     srcset<span class="sy0">=</span><span class="st0">&quot;lighthouse-160.jpg 160w,</span>
<span class="sc2">             lighthouse-320.jpg 320w,</span>
<span class="sc2">             lighthouse-640.jpg 640w,</span>
<span class="sc2">             lighthouse-1280.jpg 1280w&quot;</span>&gt;</span></pre>
<p>El navegador utiliza este descriptor de la anchura para elegir la mejor imagen en función de la anchura del navegador y de la resolución de la pantalla:</p>
<p><img alt="Una foto de un faro que cubre siempre el 80% de la anchura de la ventana del navegador" src="http://librosweb.es/img/tutoriales/imagenes-responsive-con-elemento-picture/lighthouse-example-img.png" /></p>
<p>En este ejemplo, la ventana de la izquierda tiene aproximadamente 800px de ancho, por lo que el navegador carga la imagen <code>lighthouse-640.jpg</code>. No obstante, si el dispositivo tiene una densidad de píxeles de <code>2x</code>, entonces se carga la imagen <code>lighthouse-1280.jpg</code>.</p>
<p>Al añadir <code>&lt;picture&gt;</code>, el atributo <code>sizes</code> se puede utilizar tanto en el elemento <code>&lt;img&gt;</code> como en los elementos <code>&lt;source&gt;</code>:</p>
<pre class="html5 code"><span class="sc2">&lt;picture&gt;</span>
  <span class="sc2">&lt;<span class="kw2">source</span> <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;(min-width: 800px)&quot;</span></span>
<span class="sc2">          sizes<span class="sy0">=</span><span class="st0">&quot;80vw&quot;</span></span>
<span class="sc2">          srcset<span class="sy0">=</span><span class="st0">&quot;lighthouse-landscape-640.jpg 640w,</span>
<span class="sc2">                  lighthouse-landscape-1280.jpg 1280w,</span>
<span class="sc2">                  lighthouse-landscape-2560.jpg 2560w&quot;</span>&gt;</span>
  <span class="sc2">&lt;<span class="kw2">img</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;lighthouse-160.jpg&quot;</span> <span class="kw3">alt</span><span class="sy0">=</span><span class="st0">&quot;lighthouse&quot;</span></span>
<span class="sc2">       sizes<span class="sy0">=</span><span class="st0">&quot;80vw&quot;</span></span>
<span class="sc2">       srcset<span class="sy0">=</span><span class="st0">&quot;lighthouse-160.jpg 160w,</span>
<span class="sc2">               lighthouse-320.jpg 320w,</span>
<span class="sc2">               lighthouse-640.jpg 640w,</span>
<span class="sc2">               lighthouse-1280.jpg 1280w&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span>picture&gt;</span></pre>
<p>Siguiendo con este mismo ejemplo, cuando el navegador tiene una anchura de 800px o superior, se carga la imagen panorámica del faro:</p>
<p><img alt="La foto del faro siempre ocupa el 80% de la ventana del navegador, pero los navegadores anchos muestran la versión panorámica de la foto" src="http://librosweb.es/img/tutoriales/imagenes-responsive-con-elemento-picture/lighthouse-example-picture.png" /></p>
<p>La anchura del navegador de la izquierda es mayor que 800px, por lo que se muestra la versión panorámica de la imagen.</p>
<h2 id="toc-file-type">Seleccionando diferentes formatos de imagen</h2>
<p>El atributo <code>type</code> del elemento <code>&lt;source&gt;</code> se puede utilizar para cargar formatos de imagen alternativos que pueden no estar soportados por el navegador del usuario. Si por ejemplo quieres servir imágenes en <a href="https://developers.google.com/speed/webp/">formato WebP</a> para los navegadores que lo soportan, pero al mismo tiempo mantener las imágenes JPEG para el resto de navegadores, debes utilizar lo siguiente:</p>
<pre class="html5 code"><span class="sc2">&lt;picture&gt;</span>
    <span class="sc2">&lt;<span class="kw2">source</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;image/webp&quot;</span> srcset<span class="sy0">=</span><span class="st0">&quot;images/butterfly.webp&quot;</span>&gt;</span>
    <span class="sc2">&lt;<span class="kw2">img</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;images/butterfly.jpg&quot;</span> <span class="kw3">alt</span><span class="sy0">=</span><span class="st0">&quot;a butterfly&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span>picture&gt;</span></pre>
<h2 id="toc-additional-code-examples">Ejemplos adicionales</h2>
<p>Puedes consultar el artículo <em><a href="http://dev.opera.com/articles/responsive-images/">Responsive Images: Use Cases and Documented Code Snippets to Get You Started</a></em> del blog para desarrolladores de Opera.com para obtener la lista completa de ejemplos de uso de los elementos <code>&lt;picture&gt;</code> y <code>&lt;img&gt;</code> junto con los atributos <code>srcset</code>, <code>media</code>, <code>sizes</code> y <code>type</code>.</p>
<h2 id="toc-try-it-out">Soporte de los navegadores actuales</h2>
<p>El elemento <code>&lt;picture&gt;</code> solamente es soportado hoy en día por <strong>la versión 38 del navegador Google Chrome</strong>. Puedes probarla con la opción de <a href="https://developer.chrome.com/devtools/docs/device-mode#screen-emulation">emular diferentes tipos de pantalla</a> de las <em>DevTools</em> del navegador.</p>
<h2>Sobre el autor</h2>
<p>Este artículo fue publicado originalmente por <strong>Pearl Chen</strong> y ha sido traducido con permiso por <a href="https://github.com/javiereguiluz">Javier Eguiluz</a>.</p>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/el-nuevo-elemento-picture-de-html5-para-crear-imagenes-responsive/</guid>
        <pubDate>Wed, 08 Oct 2014 00:00:00 +0200</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[css]]></category>
                    <category><![CDATA[responsive]]></category>
                    <category><![CDATA[html5]]></category>
            </item>
        <item>
        <title><![CDATA[ Cómo conseguir que el texto de tus sitios web se vea igual en Mac OS, Windows y Linux ]]></title>
        <link>http://librosweb.es/tutorial/como-conseguir-que-el-texto-de-tus-sitios-web-se-vea-igual-en-mac-os-windows-y-linux/</link>
        <description><![CDATA[
            <p>Una de las preguntas más habituales que surgen al comprobar tus sitios web en diferentes sistemas operativos es <em>¿Por qué se ve tan diferente el texto en Mac OS, Windows y Linux?</em> De hecho es posible que más de una vez te hayan preguntado <em>"¿por qué se ve la letra «tan gorda» en Mac OS comparada con Windows y Linux"?</em>.</p>
<p><img alt="Izquierda: texto en Mac OS X. Derecha: el mismo texto en Windows." src="http://librosweb.es/img/tutoriales/comparativa_tipografia_mac_windows.png" /></p>
<p>Izquierda: texto en Mac OS X. Derecha: el mismo texto en Windows.</p>
<h2>Por qué se producen estas diferencias</h2>
<p>Las diferencias en cómo se muestra el texto se basan principalmente en dos factores:</p>
<ul>
<li><strong>Motor de renderización</strong>, es el componente del sistema operativo que se encarga de dibujar el texto en la pantalla.</li>
<li><strong>Antialiasing</strong>, es un filtro gráfico que se aplica al texto para que se vea mejor por pantalla.</li>
</ul>
<h3>Motores de renderización de texto</h3>
<p>El motor de Mac OS y de los dispositivos iOS se llama <strong>Core Text</strong> y está diseñado para respetar al máximo las formas originales de cada tipografía. Esto provoca que que con tamaños de letra enormes el texto se vea prácticamente perfecto. Pero con tamaños de letra pequeños como los de un párrafo, los caracteres aumentan su grosor e incluso a veces «se salen» del espacio asignado para cada carácter. Esto hace que algunas partes del texto se lleguen a ver un poco borrosas.</p>
<p>Windows dispone de varios motores para renderizar texto. El más moderno se llama <strong>DirectWrite</strong> y se utiliza en Windows Vista, 7 y 8. El motor anterior era parte de lo que se conoce como <strong>GDI</strong> (<em>Graphics Device Interface</em>) y se utilizaba en Windows XP y Vista. A diferencia de Mac OS, el motor de Windows siempre encaja el texto en el espacio disponible, lo que hace que se vea más nítido y mucho más fino. El problema es que para conseguirlo, las formas de algunos caracteres a veces se deforman y no respetan la tipografía original.</p>
<p>Linux y los dispositivos Android utilizan la librería <strong>FreeType</strong> para mostrar el texto. El resultado que se obtiene se encuentra a medio camino entre Mac y Windows, ya que Linux trata de respetar tanto el espacio disponible como las formas originales de las tipografías.</p>
<h3>Antialiasing</h3>
<p>En los primeros sistemas operativos, el texto se mostraba sin aplicarle ningún efecto gráfico para mejorarlo. Con el desarrollo de la técnica del <a href="http://es.wikipedia.org/wiki/Antialiasing">antialiasing</a>, el aspecto del texto mostrado en pantalla ha mejorado notablemente.</p>
<p>La siguiente imagen muestra una comparativa de las tres técnicas principales para mostrar el texto:</p>
<p><img alt="Los tres tipos principales de filtros antialiasing" src="http://librosweb.es/img/tutoriales/tipos_de_antialiasing.png" /></p>
<p>(Imagen cortesía de typerendering.com)</p>
<p>El texto de la izquierda no utiliza <em>antialiasing</em>, por lo que se ve bastante mal en todos los tamaños. El texto del medio utiliza el primer tipo de <em>antialiasing</em> que se desarrolló y que se basa en una escala de grises. El texto de la derecha utiliza el <em><a href="http://en.wikipedia.org/wiki/Subpixel_rendering">renderizado subpixel</a></em>, que es la técnica más moderna y la que obtiene mejores resultados. Su desventaja es que el texto pequeño se ve un poco borroso.</p>
<h2>Minimizando las diferencias entre sistemas operativos</h2>
<p>La solución tradicional para minimizar o al menos disimular en lo posible estas diferencias consistía en aplicar las propiedades <code>-webkit-font-smoothing: antialiased</code> (para Google Chrome y Safari) y <code>-moz-osx-font-smoothing: grayscale</code> (para Firefox). Aunque es cierto que el texto se muestra más fino en Mac OS X, el problema es que se vuelve un poco más borroso.</p>
<p>La nueva solución que propone <a href="http://typerendering.com/">el proyecto Type Rendering Mix</a> consiste en modificar los estilos CSS del texto en función del sistema operativo del usuario. De esta manera puedes disminuir el grosor del texto en Mac o aumentarlo en Windows/Linux para que el texto se vea lo más parecido posible en cualquier dispositivo.</p>
<p>Técnicamente se trata de una librería JavaScript que detecta tanto el motor de renderización como el tipo de <em>antialiasing</em> que se está utilizando. Después aplica dos clases CSS al elemento <code>&lt;html&gt;</code> de la página para que puedas modificar los estilos de la página convenientemente.</p>
<p>Así que para utilizarlo, primero tienes que descargar la librería JavaScript (que <em>pesa</em> unos 3KB) desde <a href="http://typerendering.com/">su sitio web</a> y después tienes que enlazarla en todas tus páginas:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;/js/trmix.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre>
<p>Si ahora recargas tu página, verás que al elemento <code>&lt;html&gt;</code> se le han aplicado dos nuevas clases CSS:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">html</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;tr-coretext tr-aa-subpixel&quot;</span>&gt;</span>
    ...
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre>
<p>La primera clase (<code>tr-coretext</code>) indica el motor de renderización de texto utilizado y la segunda clase (<code>tr-aa-subpixel</code>) indica el tipo de <em>antialiasing</em> que se está aplicando. Los posibles valores de la primera clase se indican en la siguiente tabla:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Dispositivo</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>tr-coretext</code></td>
<td>Mac OS X y iOS (iPhone, iPad)</td>
</tr>
<tr>
<td><code>tr-gdi</code></td>
<td>Windows XP y Windows Vista SP1</td>
</tr>
<tr>
<td><code>tr-directwrite</code></td>
<td>Windows Vista SP2 y versiones posteriores (Windows 7, 8)</td>
</tr>
<tr>
<td><code>tr-freetype</code></td>
<td>Android y Linux</td>
</tr>
</tbody>
</table>
<p>Utilizando esta clase puedes hacer que el texto de Mac OS se vea más fino para igualar al de Windows o viceversa, hacer que el texto en Windows se vea un poco más grueso para igualar al de Mac:</p>
<pre class="css code"><span class="coMULTI">/* Los títulos en Mac ahora se ven más finos */</span>
<span class="re1">.tr-coretext</span> h1 <span class="br0">&#123;</span>
  <span class="kw1">font-weight</span><span class="sy0">:</span> <span class="nu0">100</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* Los títulos en Windows y Linux ahora se ven más gruesos */</span>
<span class="re1">.tr-directwrite</span> h1<span class="sy0">,</span>
<span class="re1">.tr-freetype</span> h1 <span class="br0">&#123;</span>
  <span class="kw1">font-weight</span><span class="sy0">:</span> <span class="nu0">600</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>
<p>En cuanto a la clase que indica el tipo de <em>antialiasing</em>, sus valores pueden ser:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Tipo de <em>antialiasing</em></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>tr-aa-none</code></td>
<td>No se aplica ningún <em>antialiasing</em></td>
</tr>
<tr>
<td><code>tr-aa-grayscale</code></td>
<td><em>Antialiasing</em> basado en una escala de grises</td>
</tr>
<tr>
<td><code>tr-aa-subpixel</code></td>
<td><em>Antialising</em> de tipo subpíxel</td>
</tr>
</tbody>
</table>
<p>En ocasiones no es posible detectar el tipo de <em>antialiasing</em> con absoluta certeza. En estos casos, las clases CSS incluyen el prefijo <code>unknown</code> para indicar que es un valor estimado en vez de detectado (<code>tr-aa-unknown-none</code>, <code>tr-aa-unknown-grayscale</code> y <code>tr-aa-unknown-subpixel</code>). </p>
<p>Y si no fuera posible ni siquiera estimar qué motor y qué tipo de <em>antialiasing</em> se está utilizando, entonces las clases CSS aplicadas son <code>tr-unknown</code> y <code>tr-aa-unknown</code>.</p>
<h2>Desactivando las fuentes web</h2>
<p>Otro de los usos de la librería Type Rendering Mix consiste en deshabilitar las fuentes web cuando el dispositivo no tiene el <em>antialiasing</em> activado, ya que esto hace que el texto se vea realmente mal.</p>
<p>En esos casos, utiliza la clase <code>.tr-aa-none</code> para cambiar la tipografía por ejemplo a Verdana, que es una fuente que se ve bien incluso cuando el <em>antialiasing</em> está desactivado:</p>
<pre class="css code"><span class="re1">.tr-aa-none</span> <span class="br0">&#123;</span>
  <span class="kw1">font-family</span><span class="sy0">:</span> Verdana<span class="sy0">,</span> <span class="kw2">sans-serif</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/como-conseguir-que-el-texto-de-tus-sitios-web-se-vea-igual-en-mac-os-windows-y-linux/</guid>
        <pubDate>Sun, 17 Aug 2014 00:00:00 +0200</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[tipografía]]></category>
                    <category><![CDATA[css]]></category>
                    <category><![CDATA[mac os]]></category>
                    <category><![CDATA[windows]]></category>
                    <category><![CDATA[linux]]></category>
            </item>
        <item>
        <title><![CDATA[ El proceso de rediseño de LibrosWeb.es ]]></title>
        <link>http://librosweb.es/tutorial/el-proceso-de-rediseno-de-libroswebes/</link>
        <description><![CDATA[
            <p>Hace unas semanas presentamos el nuevo rediseño del sitio web <strong>librosweb.es</strong>. En este artículo explico cómo fue el proceso que seguí para la actualización, tanto desde el punto de vista técnico como del diseño. Mi propósito no es dar lecciones de nada a nadie, sino contar mi experiencia por si te puede servir para coger ideas y aplicarlas en tu propio trabajo.</p>
<h2>Planificación</h2>
<p>Antes de comenzar a rediseñar el sitio, estos fueron los principales objetivos que me marqué:</p>
<ul>
<li>El nuevo diseño debía basarse en Bootstrap 3, en vez de continuar con la versión Bootstrap 2.</li>
<li>Además de los móviles, <em>tablets</em> y escritorios normales, el nuevo diseño <em>responsive</em> debía tener un cuarto punto de ruptura para los escritorios de alta resolución (que sois la mayoría de los que visitáis el sitio).</li>
<li>El nuevo diseño debía seguir la línea minimalista de eliminar cualquier elemento que no sea estrictamente necesario.</li>
</ul>
<h2>Actualizando a Bootstrap 3</h2>
<p>El cambio tecnológico más importante detrás del rediseño ha sido el cambio de Bootstrap 2 a <a href="http://librosweb.es/bootstrap_3/">Bootstrap 3</a>, la versión más reciente del famoso framework CSS. Como actualizar de una versión a otra no es posible, tuvimos que rehacer prácticamente todas las reglas de nuestro archivo CSS y también actualizamos el código HTML de todas las páginas (especialmente los atributos <code>class</code> que definen la estructura de la página).</p>
<p>Al margen de estos detalles técnicos, el principal cambio de Bootstrap 3 es lo que sus creadores denominan <em>estrategia "mobile first"</em>. En la anterior generación de frameworks CSS, primero se diseñaba el sitio para escritorios normales y luego se añadían <em>media queries</em> de CSS para ajustar el diseño en los dispositivos inferiores (móviles y <em>tablets</em>).</p>
<p><strong>Bootstrap 3 te obliga a diseñar primero la versión para el dispositivo más pequeño</strong>: los móviles con poca resolución y en vertical. Después tienes que ir añadiendo los <em>media queries</em> para los otros dispositivos en orden creciente según su tamaño: <em>tablets</em>, escritorios normales y escritorios muy grandes.</p>
<p>De esta manera, el nuevo sitio es totalmente <em>responsive</em> y tiene cuatro puntos de ruptura en función de la resolución del dispositivo. La hoja de estilos tiene más o menos la siguiente estructura (tal y como expliqué <a href="http://librosweb.es/foro/pregunta/184/medidas-recomendadas-para-los-media-queries-de-css/">en esta pregunta</a> que plantearon en el foro):</p>
<pre class="css code"><span class="coMULTI">/* ESTILOS NORMALES (para móviles en vertical) */</span>
body <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
p    <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* ESTILOS RESPONSIVE para Móviles en horizontal o tablets en vertical */</span>
<span class="co1">@media (min-width: 768px) {</span>
  ...
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* ESTILOS RESPONSIVE para Tablets en horizonal y escritorios normales */</span>
<span class="co1">@media (min-width: 1024px) {</span>
  ...
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* ESTILOS RESPONSIVE para Escritorios muy anchos */</span>
<span class="co1">@media (min-width: 1200px) {</span>
  ...
<span class="br0">&#125;</span></pre>
<p>La estrategia <em>"mobile first"</em> es la que incorporan todos los frameworks CSS modernos, por lo que te recomiendo que te adaptes cuanto antes a esa forma de diseñar sitios y aplicaciones web.</p>
<p>Por otra parte, una de las desventajas de Bootstrap 3 es que su archivo CSS completo es mucho más grande que el de Bootstrap 2, por lo que puede penalizar ligeramente el tiempo de carga de tus páginas.</p>
<p>A pesar de estas desventajas, Bootstrap 3 es mucho mejor que su antecesor en todos los aspectos técnicos, tal y como puedes comprobar leyendo <a href="http://librosweb.es/bootstrap_3/">el manual oficial de Bootstrap 3</a>. Mi recomendación es que si vas a desarrollar un proyecto nuevo, solamente utilices Bootstrap 3. Si el proyecto ya está diseñado con Bootstrap 2, creo que la conversión no merece la pena a menos que dispongas de muchos recursos para hacerlo o sepas que el proyecto va a crecer en el futuro.</p>
<h2>Otros cambios técnicos</h2>
<p>Como Bootstrap 3 me obligaba a cambiar todas las plantillas HTML del sitio, aproveché para incorporar un pequeño cambio que estoy introduciendo últimamente en todas las aplicaciones que desarrollo. El elemento <code>&lt;body&gt;</code> de todas las páginas incluye ahora un atributo <code>id</code> con un código único para cada página. Observa por ejemplo la portada del sitio:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">body</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;p-0&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;homepage&quot;</span>&gt;</span>
  ...
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span></pre>
<p>El atributo <code>id</code> es un código numérico único para cada página (<code>p-0</code> es la portada, <code>p-1</code> es la página de índice de los libros, <code>p-1-1</code> es la página de índice de un libro, etc.) Como este valor es único para cada página y está a nivel de <code>&lt;body&gt;</code>, me permite simplificar mucho los estilos CSS del sitio. Para no volverme loco, como parte de la documentación del sitio mantengo actualizado un catálogo de páginas con sus correspondientes atributos <code>id</code>:</p>
<table>
<thead>
<tr>
<th>Código</th>
<th>Página</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>p-0</code></td>
<td>Portada</td>
<td><code>/</code></td>
</tr>
<tr>
<td><code>p-1</code></td>
<td>Índice de la sección de libros</td>
<td><code>/libros</code></td>
</tr>
<tr>
<td><code>p-1-1</code></td>
<td>Índice de un libro</td>
<td><code>/libro/{titulo}</code></td>
</tr>
<tr>
<td><code>p-1-2</code></td>
<td>Página interior de un libro</td>
<td><code>/libro/{titulo}/{seccion}/{pagina}</code></td>
</tr>
<tr>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<p>Además, como las páginas que pertenecen a una sección del sitio suelen tener estilos muy parecidos, utilizo el atributo <code>class</code> del <code>&lt;body&gt;</code> para aplicar un mismo valor a las diferentes páginas de una misma sección (libros, tutoriales, foro, etc.) Así que por ejemplo la hoja de estilos para la sección de los libros tiene este aspecto:</p>
<pre class="css code"><span class="coMULTI">/* Estilos comunes para todas las páginas de la sección de libros */</span>
body<span class="re1">.libros</span> <span class="br0">&#123;</span>
  h1 <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
  p  <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* Estilos específicos para las páginas interiores de los libros */</span>
body<span class="re0">#p-1-2</span> <span class="br0">&#123;</span>
  h1 <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
  p  <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>
<h3>Iconos</h3>
<p>Como me obsesiona el diseño limpio y no quiero penalizar el tiempo de carga de las páginas, soy muy reacio a incluir imágenes o iconos en el diseño de las páginas. Por eso no utilizo directamente la increíble colección de iconos llamada <a href="http://fortawesome.github.io/Font-Awesome/">FontAwesome</a>. En su lugar creé mi propia fuente de iconos gracias al excelente servicio <a href="http://fontello.com/">Fontello</a> y me quedé solamente con seis de los más de 400 iconos que incluye FontAwesome.</p>
<h3>Logotipo</h3>
<p>Debido al diseño <em>responsive</em> el logotipo del sitio se muestra en tres tamaños diferentes y en dos colores diferentes. En el pasado utilizaba la técnica de embeber la imagen PNG del logotipo en el propio archivo CSS. Pero con las seis variantes del logotipo que necesita el nuevo sitio, esto aumentaría demasiado el tamaño del archivo.</p>
<p>Así que convertí el logotipo en un archivo vectorial SVG que puedo manipular para mostrarlo en cualquier tamaño y con cualquier color. Para evitar tener que hacer una conexión al servidor para descargar el logotipo del sitio, decidí incluir el propio contenido del archivo SVG directamente dentro del HTML de cada página.</p>
<h2>Buscando inspiración para el diseño gráfico</h2>
<p>Si alguien te dice que ha diseñado algo sin inspirarse en un diseño anterior creado por otra persona, simplemente te está mintiendo. <strong>Nadie crea nada completamente original</strong>. De ahí la famosa frase de Picasso: <em>"Los buenos artistas copian, los genios roban"</em>.</p>
<p>Como mis habilidades para el diseño son muy limitadas, inspirarse en otros diseños no es para mí una opción sino una obligación. Mi secreto para tener buenas referencias en las que inspirarme es muy sencillo: siempre que navego utilizo <a href="https://evernote.com/">Evernote</a> con sus correspondientes extensiones de navegador para capturar cualquier página que me guste su diseño. Además, gracias a las etiquetas de Evernote, al capturar una referencia indico si me gustan sus colores, la tipografía, el diseño en general, los iconos, etc. Así es muy fácil buscar después referencias muy específicas (ejemplo: <em>diseño + rojo + minimalista</em>, <em>iconos + barra lateral</em>, <em>degradado + gris</em>)</p>
<p>Además, prácticamente a diario visito <a href="https://dribbble.com/">Dribbble</a> y <a href="https://www.behance.net/">Behance</a> para guardar los diseños que más me gustan y aquellos en los que creo que podría inspirarme más adelante. Como en nuestro sitio web lo más importante es que los contenidos se puedan leer bien, en Behance la categoría que más visito es la de <em>Print Design</em>, ya que ahí se encuentran los diseñadores de revistas en papel, que son los que mejor saben diseñar los contenidos de texto.</p>
<p>Con todo esto, al empezar el rediseño de este sitio, dí un repaso a todas las referencias que había capturado en los últimos meses y a continuación explico cuáles son las que finalmente utilicé.</p>
<h3>El menú principal de navegación</h3>
<p>Cuando visitas este sitio en un escritorio con mucha resolución, la cabecera se muestra como una columna estática en la parte izquierda del navegador. Para ello busqué buenas referencias de columnas laterales de navegación y al final me quedé con la columna izquierda del <a href="http://www.nytco.com/who-we-are/">sitio web corporativo del New York Times</a>.</p>
<p><img alt="Izquierda: columna original del New York Times. Derecha: nuestra nueva columna de navegación." src="http://librosweb.es/img/tutoriales/inspiracion_barra_lateral.png" /></p>
<p>(Izquierda: columna original del New York Times. Derecha: nuestra nueva columna de navegación.)</p>
<p>La principal diferencia es que su columna izquierda tiene una anchura que varía cuando aumentas la ventana del navegador y la nuestra es fija. Por cierto, si ves el código fuente de este sitio, verás que utilizo el mismo truco que ellos para establecer el color de fondo de la columna ... ¡y es un truco realmente curioso!</p>
<h3>Tipografía</h3>
<p>El anterior diseño utilizaba una fuente web de las disponibles en Google Web Font. Sin embargo, en el rediseño decidí prescindir de este tipo de fuentes por varios motivos:</p>
<ul>
<li>Las fuentes añaden un peso no despreciable a las páginas y requieren al menos dos conexiones con los servidores de Google (una para obtener el CSS de la fuente y otra para obtener el archivo específico para tu dispositivo).</li>
<li>Las fuentes web siguen sin verse perfectas en todas las plataformas y dispositivos. Esto es especialmente cierto para dispositivos Windows.</li>
</ul>
<p>Así que finalmente opté por utilizar las siguientes familias de fuentes:</p>
<ul>
<li>Para el <strong>texto normal</strong>: "Helvetica Neue", Helvetica, Arial, sans-serif.</li>
<li>Para el <strong>código fuente</strong>: Consolas, "Liberation Mono", "Droid Sans Mono", Monaco, Menlo, "Courier New", Courier, monospace.</li>
</ul>
<p>Como las fuentes Helvetica/Arial son tan populares, algunos diseñadores piensan que los diseños resultantes no tienen personalidad. Puede que estén en lo cierto, pero a cambio todas las personas están acostumbradas a esas fuentes, se ven perfectamente en cualquier dispositivo y ofrecen una legibilidad realmente buena.</p>
<p>Así que para inspirarme busqué entre las referencias relacionadas con diseños limpios basados en Helvetica. De todas ellas, al final me quedé con Swiss, la aerolínea suiza. Su <a href="http://www.swiss.com/corporate/EN/company">material corporativo</a> hace un muy buen uso de la tipografía y al ser también su color corporativo el rojo, la decisión fue bastante fácil.</p>
<p><img alt="Izquierda: diseño original de Swiss. Derecha: nuestra nueva tipografía." src="http://librosweb.es/img/tutoriales/inspiracion_tipografia.png" /></p>
<p>(Izquierda: diseño original de Swiss. Derecha: nuestra nueva tipografía.)</p>
<h3>Paleta de colores</h3>
<p>Los diseñadores profesionales no recomiendan utilizar el color blanco puro como color de fondo de los sitios web, ya que es muy <em>agresivo</em> y puede cansar rápidamente los ojos de los lectores. Después de muchas pruebas con colores de fondo grises muy claros, pensé que ninguno quedaba tal y como a mí me gustaba y decidí seguir con el color blanco puro <code>#FFF</code>.</p>
<p>Para el color de texto principal sí que decidí hacer caso a los diseñadores profesionales y no utilizo el negro puro <code>#000</code>. En su lugar utilizo un color <em>"casi negro"</em> que tiene muy buena legibilidad y no resulta tan agresivo como el negro puro. En concreto la web utiliza el color <code>#222</code>.</p>
<p>Otro de los elementos importantes del sitio son los enlaces. Como sabía que quería mostrarlos en color azul para que destaquen lo máximo posible, decidí utilizar el mismo color azul que usa Google en sus resultados de búsqueda. En el momento de hacer el rediseño este color era <code>#12C</code>, pero ahora Google lo ha cambiado a un color más oscuro <code>#1A0DAB</code>. De momento seguiré manteniendo el color azul original de Google.</p>
<p>Cuando el sitio web que diseñas tiene un color principal muy marcado, como el rojo en nuestro caso, es recomendable que visites los sitios más populares que utilizan tu mismo color. En nuestro caso el <em>"sitio web popular y rojo"</em> que más me gusta es <a href="http://www.yelp.com/">Yelp</a>. Además, han publicado una <a href="http://www.yelp.com/styleguide">guía de estilo</a> completísima de la que copié la idea de empezar a utilizar <em>grises cálidos</em> en vez de <em>grises fríos</em>.</p>
<p>Los <em>grises fríos</em> son los colores grises que utilizan la mayoría de sitios web y en los que los tres componentes R, G, B del color son iguales. Ejemplos: <code>#777</code>, <code>#CCC</code>, <code>#F5F5F5</code>. Si a estos grises le añades un poco de amarillo el resultado es un gris mucho más cálido. Compara nuestra paleta actual con la paleta que utilizábamos antes:</p>
<p><img alt="Arriba: nuestra paleta original de grises fríos. Abajo: nuestra nueva paleta de grises cálidos." src="http://librosweb.es/img/tutoriales/comparativa_grises_frios_calidos.png" /></p>
<p>(Arriba: nuestra paleta original de grises fríos. Abajo: nuestra nueva paleta de grises cálidos.)</p>
<h2>Probando el nuevo rediseño</h2>
<p>Una vez terminado el rediseño, lo primero que tienes que hacer es probarlo en diferentes dispositivos y navegadores. Hace unos años bastaba con probar los diseños en los navegadores Firefox e Internet Explorer. Hoy en día hay cientos de combinaciones posibles de navegadores y dispositivos, así que ya no puedes probarlo en tu propio ordenador.</p>
<p>Para probar el nuevo aspecto del sitio eché mano de estos tres servicios gratuitos:</p>
<ul>
<li><a href="http://browsershots.org/">Browsershots</a>, prueba tu sitio en decenas de navegadores. Lo único malo es que se ha quedado atrás en lo que respecta a los móviles y <em>tablets</em>.</li>
<li><a href="https://modern.ie/en-us/screenshots">modern.IE Website Screenshots</a>, servicio de Microsoft que te permite probar una web en los sistemas operativos y dispositivos más modernos.</li>
<li><a href="http://www.webpagetest.org/">WebPageTest</a>, este servicio se utiliza sobre todo para medir el rendimiento de los sitios web, pero también puedes usarlo para probar tu sitio en diferentes navegadores y dispositivos.</li>
</ul>
<h2>En resumen</h2>
<ul>
<li>Pasar un sitio web de Bootstrap 2 a Booststrap 3 requiere de mucho trabajo, pero la nueva versión del <em>framework</em> es mucho mejor en todo.</li>
<li>Vivimos en la era <em>responsive</em> y estamos metiéndonos de lleno en la era <em>mobile first</em>, donde los diseños se empiezan en el móvil y se acaban en el escritorio.</li>
<li>Visita con regularidad sitios en los que puedas inspirarte con los diseños de otras personas. Captura (con Evernote o como sea) los diseños que más te gusten para poder repasarlos cuando necesites inspiración.</li>
</ul>
<p>Si tienes cualquier pregunta sobre cómo realizamos el rediseño o si quieres compartir tus propias experiencias, puedes iniciar una conversación <a href="http://librosweb.es/foro">en nuestro foro</a>.</p>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/el-proceso-de-rediseno-de-libroswebes/</guid>
        <pubDate>Wed, 13 Aug 2014 00:00:00 +0200</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[bootstrap]]></category>
                    <category><![CDATA[css]]></category>
                    <category><![CDATA[tipografía]]></category>
            </item>
        <item>
        <title><![CDATA[ Las novedades de Firefox 29 para programadores y diseñadores web ]]></title>
        <link>http://librosweb.es/tutorial/las-novedades-de-firefox-29-para-programadores-y-disenadores-web/</link>
        <description><![CDATA[
            <p>Firefox 29, la versión más esperada en mucho tiempo del popular navegador Firefox, se publicó el 29 de marzo de 2014. Aunque los cambios más radicales afectan a los usuarios finales del navegador, esta nueva versión también incluye <strong>novedades muy interesantes para diseñadores y programadores web</strong>. En este tutorial resumimos las novedades más importantes.</p>
<h2>Novedades en las herramientas para desarrolladores</h2>
<p><strong>Previsualización de las transformaciones</strong></p>
<p>Cuando pasas el ratón por encima de una propiedad <code>transform</code>, el inspector te muestra una previsualización de esa transformación:</p>
<p><img alt="Previsualizado las transformaciones CSS con Firefox 29" src="http://librosweb.es/img/tutoriales/firefox29-transform-preview.gif" /></p>
<p><strong>Posibilidad de editar los archivos SASS o LESS</strong></p>
<p>El <em>Editor de estilos</em> ahora permite editar directamente los archivos SASS o LESS que utilizas para generar el CSS que se está aplicando en tu sitio web:</p>
<p><img alt="Editando los archivos SASS o LESS con Firefox 29" src="http://librosweb.es/img/tutoriales/firefox29-editor-de-estilos.png" /></p>
<p>Para que esta opción funcione, debes utilizar como mínimo las versiones SASS 3.3.0 o LESS 1.5.0 y debes añadir en los archivos CSS generados el <em>"source map"</em>. Para ello, con SASS sólo tienes que añadir la opción <code>--sourcemap</code> al generar los archivos CSS.</p>
<p><strong>Otras mejoras menores</strong></p>
<ul>
<li>El <em>Editor de Estilos</em> ahora soporta autocompletado para propiedades y valores.</li>
<li>Se ha mejorado la visualización de las estadísticas sobre rendimiento en el panel de <em>Red</em>.</li>
<li>Ahora los <em>Web workers</em> pueden añadir directamente mensajes en la consola.</li>
</ul>
<h2>Novedades relacionadas con CSS</h2>
<p><strong>Añadido soporte para variables CSS</strong></p>
<p>Siguiendo las mismas ideas que los preprocesadores SASS y LESS, ahora es posible definir variables en los archivos CSS. La sintaxis no es tan cómoda como en SASS y LESS, pero lo importante es que <strong>por fin podemos utilizar variables en los archivos CSS</strong>, algo que llevamos años esperando:</p>
<pre class="css code"><span class="re2">:root </span><span class="br0">&#123;</span>
    var-color-principal<span class="sy0">:</span> <span class="re0">#CC1414</span><span class="sy0">;</span> 
    var-gris-claro<span class="sy0">:</span> <span class="re0">#F5F5F5</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
div<span class="re0">#principal</span> <span class="br0">&#123;</span>
    <span class="kw1">background-color</span><span class="sy0">:</span> var<span class="br0">&#40;</span>gris-claro<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
div<span class="re0">#principal</span> h1 <span class="br0">&#123;</span>
    <span class="kw1">color</span><span class="sy0">:</span> var<span class="br0">&#40;</span>color-principal<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>
<p>Si tu versión concreta de Firefox no soporta las variables, debes activar la opción de configuración <code>layout.css.variables.enabled</code> de Firefox.</p>
<p><strong>Añadida la propiedad box-sizing</strong></p>
<p>Hasta ahora esta propiedad era interna del navegador y había que prefijarla para poder usarla (<code>-moz-box-sizing</code>). Esta propiedad permite modificar el comportamiento del navegador a la hora de calcula la anchura y altura de las cajas que forman la página.</p>
<p>Si utilizas el valor <code>content-box</code>, la anchura/altura no tiene en cuenta los bordes, rellenos (<em>padding</em>) y márgenes (<em>margin</em>). Si utilizas el valor <code>paddinng-box</code>, los rellenos sí que se incluyen. Si utilizas el valor <code>border-box</code>, la anchura/altura tiene en cuenta todos los bordes, rellenos y márgenes.</p>
<p><strong>Añadida la propiedad <code>-moz-will-animate</code></strong></p>
<p>Para mejorar el rendimiento de las páginas y aplicaciones web que contienen animaciones, los diseñadores recurren a trucos como aplicar la propiedad <code>translateZ(1px)</code> al elemento que va a animarse.</p>
<p>Para no tener que recurrir a estos trucos, se ha añadido una opción llamada <code>-moz-wil-animate</code> que sirve para indicarle a Firefox que un elemento va a animarse en algún momento y por tanto, que debe estar preparado para que el rendimiento de la página no se resienta.</p>
<p><strong>Otras mejoras menores</strong></p>
<ul>
<li>La propiedad <code>border-image</code> ahora permite utilizar gradientes.</li>
<li>La propiedad <code>visibility: collapse</code> ya se puede utilizar en los <em>flexboxes</em>.</li>
<li>Ahora se puede utilizar la notación exponencial científica en cualquier valor numérico de una propiedad CSS (ejemplos: <code>3e1</code>, <code>10e+0</code>).</li>
<li>Se ha añadido la propiedad <code>touch-action</code> para mejorar la gestión de los eventos en los dispositivos táctiles que no utilizan un ratón tradicional.</li>
</ul>
<h2>Novedades relacionadas con HTML</h2>
<ul>
<li>Ahora se encuentran disponibles los campos de formulario <code>&lt;input type=color&gt;</code> y <code>&lt;input type=number&gt;</code>.</li>
<li>Se ha eliminado el soporte para los elementos no estándar <code>&lt;pre cols&gt;</code> y <code>&lt;pre wrap&gt;</code>. Puedes conseguir los mismos resultados mediante la <a href="http://librosweb.es/referencia/css/white-space.html">propiedad white-space</a> de CSS.</li>
</ul>
<h2>Novedades relacionadas con JavaScript</h2>
<ul>
<li>Se han incorporado la interfaz <code>Promise</code> para añadir promesas a tu código. Próximamente publicaremos un tutorial explicando la importancia de las promesas en las aplicaciones JavaScript. Mientras tanto, puedes leer la <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">documentación en inglés sobre la interfaz Promise</a>.</li>
<li>Se han añadido los métodos <code>String.prototype.codePointAt()</code> y <code>String.prototype.fromCodePoint()</code> que forman parte del estándar ECMAScript 6. El primer método devuelve el código UTF-16 del caracter de la cadena situado en la posición indicada. El segundo método crea una cadena de texto a partir del código o array de códigos UTF indicados. </li>
<li>Se ha implementado completamente la API de internacionalización del estándar ECMA-402. Los nuevos objetos disponibles son <code>Intl.Collator</code>, <code>Intl.DateTimeFormat</code> y <code>Intl.NumberFormat</code>. También se han añadido nuevos métodos a las fechas (<code>toLocaleString()</code>, <code>toLocaleDateString()</code> y <code>toLocaleTimeString()</code>), los números (<code>toLocaleString()</code>) y las cadenas de texto (<code>localeCompare()</code>).</li>
<li>Ahora el método <code>JSON.parse()</code> muestra información más detallada sobre el tipo de error y la línea concreta en la que se encuentran los problemas de los archivos JSON malformados.</li>
</ul>
<h2>Novedades relacionadas con las API y el DOM</h2>
<ul>
<li>Se ha creado un nuevo tipo de <em>worker</em> llamado <code>SharedWorker</code></li>
<li>Ahora es posible saber si un <em>worker</em> está <em>online</em> o <em>offline</em> mediante la propiedad <code>Worker.onLine</code></li>
<li>Los <em>workers</em> ahora pueden utilizar la propiedad <code>location.origin</code></li>
<li>La interfaz <code>URLUtils</code> ahora permite modificar los parámetros de búsqueda de una URL mediante la propiedad <code>searchParams</code></li>
<li>Si estableces la propiedad <code>URLUtils.port</code> a una cadena vacía, se considera que el puerto es el de por defecto para el protocolo utilizado (<code>80</code> en el caso del protocolo <code>http</code>). Si quieres utilizar el puerto <code>0</code> indícalo explícitamente mediante el valor numérico <code>0</code>.</li>
<li>Se ha añadido un constructor para <code>ImageData</code>, que es la interfaz que representa a los píxeles que forman el contenido de un elemento <code>&lt;canvas&gt;</code></li>
<li>Se ha activado la API <code>Gamepad</code> que permite acceder al mando de control utilizado en los juegos. También está disponible el nuevo objeto <code>Gamepad</code> para obtener información sobre el estado del mando de control conectado.</li>
</ul>
<h2>Referencias útiles</h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/Firefox/Releases/29">Firefox 29 for developers</a>, artículo original publicado por Mozilla explicando las novedades de Firefox 29 para diseñadores y programadores web.</li>
</ul>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/las-novedades-de-firefox-29-para-programadores-y-disenadores-web/</guid>
        <pubDate>Wed, 30 Apr 2014 00:00:00 +0200</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[programación]]></category>
                    <category><![CDATA[firefox]]></category>
            </item>
        <item>
        <title><![CDATA[ Creando fácilmente imágenes de relleno para tus prototipos ]]></title>
        <link>http://librosweb.es/tutorial/creando-facilmente-imagenes-de-relleno-para-tus-prototipos/</link>
        <description><![CDATA[
            <script type="text/javascript" src="/tutoriales/js/holder.js"></script>
<p>Al crear prototipos o <em>wireframes</em> de sitios y aplicaciones web, es habitual incluir contenidos de relleno por no disponer de los contenidos definitivos. Rellenar texto es muy sencillo con el famoso <em>Lorem Ipsum</em> y <a href="http://librosweb.es/tutorial/preparando-tus-bocetos-sin-el-lorem-ipsum/">otras técnicas</a> que ya presentamos en este mismo sitio. Sin embargo, incluir imágenes de relleno no es tan fácil, ya que requiere mucho tiempo preparar imágenes con diferentes tamaños.</p>
<p>La librería <a href="http://imsky.github.io/holder/">holder.js</a>, creada por el diseñador y programador <a href="http://imsky.co/">Ivan Malopinsky</a>, soluciona este problema creando las imágenes de relleno directamente en el navegador. Las imágenes se crean mediante el elemento <code>&lt;canvas&gt;</code> y otras técnicas similares, por lo que funciona bien en todos los navegadores móviles y de escritorio, incluyendo Internet Explorer.</p>
<h2>Generando imágenes de relleno</h2>
<p>Antes de generar las imágenes, <a href="http://imsky.github.io/holder/">descarga holder.js</a> y enlaza la librería en tus páginas (también puedes instalarla mediante Composer, Bower, etc.):</p>
<pre class="html5 code"><span class="sc0">&lt;!DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
    <span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
        ...
        <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;/js/holder.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
    <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
    <span class="sc2">&lt;<span class="kw2">body</span>&gt;</span> ... <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre>
<p>A continuación, genera la primera imagen de relleno utilizando la siguiente sintaxis:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/250x250&quot;</span>&gt;</span></pre>
<p>El <em>truco</em> consiste en utilizar un valor especial para el atributo <code>src</code> de la imagen. Este valor está formado por el texto <code>holder.js</code> seguido de las dimensiones en píxeles de la imagen que se quiere generar (con el formato <code>anchura x altura</code>).</p>
<p>La siguiente imagen muestra el resultado del ejemplo anterior (ten en cuenta que la imagen no existe físicamente y está siendo generada en tiempo real por tu navegador):</p>
<img data-src="holder.js/250x250">
<p>Como el valor del atributo <code>src</code> no corresponde a ninguna imagen que exista físicamente, es posible que en Firebug y en herramientas similares veas un montón de errores. Para evitarlo, puedes utilizar el atributo <code>data-src</code> de HTML5 en vez del tradicional atributo <code>src</code>:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/250x250&quot;</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/250x250&quot;</span>&gt;</span></pre>
<h2>Personalizando las imágenes de relleno</h2>
<p>Por defecto, <code>holder.js</code> añade a cada imagen un texto mostrando sus dimensiones. Si quieres utilizar un texto propio, añade la propiedad <code>text</code>. Esto puede ser útil por ejemplo para indicar que una imagen de relleno representa en realidad a un anuncio:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/728x90/text:ANUNCIO&quot;</span>&gt;</span></pre>
<p>Y este es el resultado de generar la imagen de relleno tal y como la muestra tu navegador:</p>
<img data-src="holder.js/728x90/text:ANUNCIO">
<p>El color de las imágenes generadas por defecto es gris claro. Para hacer que las imágenes se integren mejor con tu diseño, <code>holder.js</code> define seis temas: <code>sky</code> (azul), <code>vine</code> (verde), <code>lava</code> (naranja), <code>gray</code> (el gris claro por defecto), <code>industrial</code> (gris muy oscuro) y <code>social</code> (azul Facebook). Cambia el tema de cada imagen indicando su nombre después de sus dimensiones:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/200x200/sky&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/200x200/vine&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/200x200/lava&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/200x200/gray&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/200x200/industrial&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/200x200/social&quot;</span>&gt;</span></pre>
<p>Y así se ve este ejemplo en tu navegador:</p>
<img data-src="holder.js/200x200/sky/text:sky">
<img data-src="holder.js/200x200/vine/text:vine">
<img data-src="holder.js/200x200/lava/text:lava">
<img data-src="holder.js/200x200/gray/text:gray">
<img data-src="holder.js/200x200/industrial/text:industrial">
<img data-src="holder.js/200x200/social/text:social">
<p>En la documentación de <code>holder.js</code> se explica cómo crear tus propios temas. No obstante, si lo que quieres es modificar rápidamente el color de una imagen de relleno, lo puedes hacer indicando el color de fondo y el color del texto después de sus dimensiones.</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/400x200/text:LIBROSWEB/#CC1414:#FFF&quot;</span>&gt;</span></pre>
<p>La imagen del ejemplo anterior utiliza los colores corporativos de <a href="http://librosweb.es">librosweb.es</a> y también un texto personalizado:</p>
<img data-src="holder.js/400x200/text:LIBROSWEB/#CC1414:#FFF">
<h2>Imágenes de relleno <em>responsive</em></h2>
<p>Aunque el concepto de <em>imágenes responsive</em> todavía no está tan desarrollado como debería, la librería <code>holder.js</code> sí que permite generar imágenes con tamaños relativos que se adaptan a los dispositivos o a la anchura de otros elementos de la página. Para ello, indica el tamaño en porcentaje en vez de en píxeles:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/100%x90&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/728x20%&quot;</span>&gt;</span></pre>
<p>El único problema de las imágenes de relleno <em>responsive</em> es que muestran su tamaño en píxeles. Si quieres que muestren su tamaño en porcentaje, añade la propiedad <code>textmode:literal</code>:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/100%x90/textmode:literal&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">img</span> data-<span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;holder.js/728x20%/textmode:literal&quot;</span>&gt;</span></pre>
<h2>Imágenes de relleno de fondo</h2>
<p>Las imágenes de relleno también se pueden generar como imagen de fondo de cualquier elemento. Para ello, aplica en primer lugar la clase <code>holderjs</code> (todo junto y sin punto) a cualquier elemento:</p>
<pre class="html5 code"><span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;imagen&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;holderjs&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;anuncio&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;holderjs&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre>
<p>Después, aplica la propiedad <code>background: url(...)</code> utilizando la misma sintaxis que en los ejemplos mostrados anteriormente. La única diferencia es que tienes que añadir el carácter <code>?</code> por delante de la URL:</p>
<pre class="css code"><span class="re0">#imagen</span>  <span class="br0">&#123;</span> <span class="kw1">background</span><span class="sy0">:</span> <span class="kw2">url</span><span class="br0">&#40;</span><span class="st0">&quot;?holder.js/250x250&quot;</span><span class="br0">&#41;</span> <span class="kw2">no-repeat</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="re0">#anuncio</span> <span class="br0">&#123;</span> <span class="kw1">background</span><span class="sy0">:</span> <span class="kw2">url</span><span class="br0">&#40;</span><span class="st0">&quot;?holder.js/300x250/text:ANUNCIO&quot;</span><span class="br0">&#41;</span> <span class="kw2">no-repeat</span><span class="sy0">;</span> <span class="br0">&#125;</span></pre>
<h2>Recursos útiles</h2>
<ul>
<li><a href="https://github.com/imsky/holder">Documentación oficial de holder.js</a></li>
</ul>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/creando-facilmente-imagenes-de-relleno-para-tus-prototipos/</guid>
        <pubDate>Tue, 19 Nov 2013 00:00:00 +0100</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[css]]></category>
                    <category><![CDATA[javascript]]></category>
            </item>
        <item>
        <title><![CDATA[ Cómo mejorar el rendimiento de las animaciones con CSS ]]></title>
        <link>http://librosweb.es/tutorial/como-mejorar-el-rendimiento-de-las-animaciones-con-css/</link>
        <description><![CDATA[
            <p>Los navegadores web modernos pueden aplicar con facilidad los siguientes cuatro efectos CSS: cambio de posición, escalado, rotación y opacidad. Si aplicas cualquier otro efecto CSS en la página, es muy posible que el rendimiento se resienta y no puedas mantener los 60 <em>frames</em> por segundo que hacen que la página se vea tan bien.</p>
<p>Por este motivo, todos los efectos gráficos de tus páginas se deberían reducir a las siguientes cuatro instrucciones:</p>
<pre class="css code"><span class="coMULTI">/* mover un elemento */</span>
... <span class="br0">&#123;</span> transform<span class="sy0">:</span> translate<span class="br0">&#40;</span><span class="re3">0px</span><span class="sy0">,</span> <span class="re3">0px</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* escalar (cambiar el tamaño) de un elemento */</span>
... <span class="br0">&#123;</span> transform<span class="sy0">:</span> scale<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* rotar un elemento */</span>
... <span class="br0">&#123;</span> transform<span class="sy0">:</span> rotate<span class="br0">&#40;</span>0deg<span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* cambiar la opacidad de un elemento */</span>
... <span class="br0">&#123;</span> opacity<span class="sy0">:</span> <span class="nu0">0</span>...<span class="nu0">1</span><span class="sy0">;</span> <span class="br0">&#125;</span></pre>
<p>Observa el siguiente vídeo que muestra a cámara lenta la diferencia entre animar un objeto con la propiedad <code>transform</code> (parte derecha del vídeo) o hacerlo con las propiedades tradicionales <code>position</code>, <code>top</code> y <code>left</code> (parte izquierda del vídeo):</p>
<iframe width="640" height="480" src="//www.youtube.com/embed/-62uPWUxgcg?rel=0" frameborder="0" allowfullscreen></iframe>
<h2>Del DOM al píxel a través de las <em>DevTools</em></h2>
<p>Cuando analizas una página con las <em>DevTools</em> o <em>Herramientas del desarrollador</em> de Google Chrome, deberías ver un patrón similar al siguiente:</p>
<p><img alt="Análisis del rendimiento mediante las DevTools de Google Chrome" src="http://librosweb.es/img/tutoriales/rendimiento_css_devtools-waterfall.jpg" /></p>
<p>El proceso que sigue tu navegador es muy sencillo:</p>
<ol>
<li>Determina qué estilos se aplican a cada elemento (esta es la fase <em>"Recalculate Style"</em>)</li>
<li>Calcula la geometría y posición de cada elemento (fase <em>Layout</em>)</li>
<li>Pinta los píxeles de cada elemento en diferentes capas (fase <em>Paint Setup and Paint</em>)</li>
<li>Dibuja las capas en la pantalla (fase <em>Composite Layers</em>).</li>
</ol>
<p>Para hacer que las animaciones se vean fluidas en el navegador, la clave está en evitar la máxima cantidad de trabajo. La mejor manera de conseguirlo consiste en utilizar solamente las propiedades <code>transform</code> y <code>opacity</code>. El motivo es que cuanto más arriba empieces en la línea del tiempo mostrada anteriormente, más trabajo tiene que realizar el navegador para mostrar los píxeles en pantalla.</p>
<p>Este consejo es aplicable a casi todos los navegadores, ya que Chrome, Firefox, Safari y Opera aceleran las propiedades <code>transform</code> y <code>opacity</code> mediante el <em>hardware</em>. Lamentablemente, no está claro el criterio que sigue Internet Explorer 10, así que tendremos que esperar hasta el lanzamiento de Internet Explorer 11.</p>
<h2>Animando elementos con propiedades que afectan a su <em>layout</em></h2>
<p>Cuando modificas algún elemento de la página, es probable que el navegador tenga que crear un nuevo <em>layout</em>, es decir, que tenga que recalcular el tamaño y la posición de todos los elementos afectados por el cambio. Así que aunque sólo cambies un elemento, es posible que también se recalcule la geometría de muchos otros elementos.</p>
<p>Si modificas por ejemplo la anchura del elemento <code>&lt;html&gt;</code>, todos los elementos de la página se ven afectados. Además, como es normal que un elemento afecte a muchos otros, cuando modificas un elemento de la página es muy común que llegue a afectar hasta al elemento <code>&lt;html&gt;</code>.</p>
<p>Cuanto más grande sea el árbol DOM de elementos visibles en la página, más tiempo le cuesta al navegador realizar todas esas operaciones relacionadas con el <em>layout</em>. Por eso es tan importante evitar cualquier efecto gráfico que obligue a recalcular el <em>layout</em> de los elementos.</p>
<p>Por otra parte, utilizar las clases CSS de los elementos para controlar el estado de la aplicación también puede afectar al rendimiento. El motivo es que cuando modificas las clases CSS de esos elementos, es posible que el navegador tenga que recalcular el <em>layout</em> de todos ellos. ¡Así que el rendimiento de tu aplicación se puede resentir seriamente incluso cuando no utilizas animaciones!</p>
<p>La siguiente tabla muestra las propiedades CSS más populares que provocan un recálculo del <em>layout</em> al modificar sus valores:</p>
<table>
    <thead>
        <tr>
            <th colspan="6">Propiedades CSS que afectan al <em>layout</em> de los elementos</th>
        </tr>
    </thead>
    <tbody>
    <tr>
        <td><a href="http://librosweb.es/referencia/css/border.html">border</a></td>
        <td><a href="http://librosweb.es/referencia/css/border-width.html">border-width</a></td>
        <td><a href="http://librosweb.es/referencia/css/bottom.html">bottom</a></td>
        <td><a href="http://librosweb.es/referencia/css/clear.html">clear</a></td>
        <td><a href="http://librosweb.es/referencia/css/display.html">display</a></td>
        <td><a href="http://librosweb.es/referencia/css/float.html">float</a></td>
    </tr>
    <tr>
        <td><a href="http://librosweb.es/referencia/css/font-family.html">font-family</a></td>
        <td><a href="http://librosweb.es/referencia/css/font-size.html">font-size</a></td>
        <td><a href="http://librosweb.es/referencia/css/font-weight.html">font-weight</a></td>
        <td><a href="http://librosweb.es/referencia/css/height.html">height</a></td>
        <td><a href="http://librosweb.es/referencia/css/left.html">left</a></td>
        <td><a href="http://librosweb.es/referencia/css/line-height.html">line-height</a></td>
    </tr>
    <tr>
        <td><a href="http://librosweb.es/referencia/css/margin.html">margin</a></td>
        <td><a href="http://librosweb.es/referencia/css/min-height.html">min-height</a></td>
        <td><a href="http://librosweb.es/referencia/css/overflow.html">overflow</a></td>
        <td><a href="http://librosweb.es/referencia/css/overflow.html">overflow-y</a></td>
        <td><a href="http://librosweb.es/referencia/css/padding.html">padding</a></td>
        <td><a href="http://librosweb.es/referencia/css/position.html">position</a></td>
    </tr>
    <tr>
        <td><a href="http://librosweb.es/referencia/css/right.html">right</a></td>
        <td><a href="http://librosweb.es/referencia/css/text-align.html">text-align</a></td>
        <td><a href="http://librosweb.es/referencia/css/top.html">top</a></td>
        <td><a href="http://librosweb.es/referencia/css/vertical-align.html">vertical-align</align</a>
        <td><a href="http://librosweb.es/referencia/css/white-space.html">white-space</a></td>
        <td><a href="http://librosweb.es/referencia/css/width.html">width</a></td>
    </tr>
    </tbody>
</table>
<h2>Animando elementos con propiedades que afectan al pintado</h2>
<p>Al modificar un elemento, también es posible que se tenga que realizar una fase de pintado de píxeles. El problema es que incluso en los navegadores más modernos, el pintado se realiza mediante <em>software</em>. Dependiendo de cómo se agrupen los elementos de la página en capas, es posible que el pintado también afecte a otros elementos adyacentes. Si no conoces el concepto de capas o <em>layers</em>, puedes leer <a href="http://www.html5rocks.com/en/tutorials/speed/layers/">la introducción</a> que realizó Tom Wiltzius sobre el tema.</p>
<p>Muchas propiedades CSS obligan a repintar los elementos, pero estas son las más populares:</p>
<table>
    <thead>
        <tr>
            <th colspan="6">Propiedades CSS que afectan al <em>pintado</em> de los elementos</th>
        </tr>
    </thead>
    <tbody>
    <tr>
        <td><a href="http://librosweb.es/referencia/css/background.html">background</a></td>
        <td><a href="http://librosweb.es/referencia/css/background-image.html">background-image</a></td>
        <td><a href="http://librosweb.es/referencia/css/background-position.html">background-position</a></td>
        <td><a href="http://librosweb.es/referencia/css/background-repeat.html">background-repeat</a></td>
        <td><a href="http://librosweb.es/referencia/css/background-size .html">background-size </a></td>
    </tr>
    <tr>
        <td><a href="http://librosweb.es/referencia/css/border-style.html">border-style</a></td>
        <td><a href="http://librosweb.es/referencia/css/border-radius.html">border-radius</a></td>
        <td><a href="http://librosweb.es/referencia/css/box-shadow.html">box-shadow</a></td>
        <td><a href="http://librosweb.es/referencia/css/color.html">color</a></td>
        <td><a href="http://librosweb.es/referencia/css/outline.html">outline</a></td>
    </tr>
    <tr>
        <td><a href="http://librosweb.es/referencia/css/outline-color.html">outline-color</a></td>
        <td><a href="http://librosweb.es/referencia/css/outline-style.html">outline-style</a></td>
        <td><a href="http://librosweb.es/referencia/css/outline-width.html">outline-width</a></td>
        <td><a href="http://librosweb.es/referencia/css/text-decoration.html">text-decoration</a></td>
        <td><a href="http://librosweb.es/referencia/css/visibility.html">visibility</a></td>
    </tr>
    </tbody>
</table>
<p>Si modificas el valor de cualquiera de estas propiedades, se vuelve a pintar el elemento afectado y todas las capas relacionadas con ese elemento. Este problema es especialmente importante en los dispositivos móviles, ya que sus CPU suelen ser menos potentes que las de los equipos de escritorio.</p>
<h2>Animando elementos con propiedades que afectan a su composición</h2>
<p>Una de las propiedades CSS que parece que debería provocar el repintado de los elementos pero que normalmente no lo hace es la propiedad <code>opacity</code>. En realidad, los cambios en la opacidad de un elemento los gestiona directamente la GPU modificando su transparencia. Ten en cuenta que esto solamente se aplica cuando ese elemento es lo único que contiene la capa.</p>
<p>En los navegadores basados en los motores Blink y WebKit, se crea una nueva capa para cada elemento que tiene una transición CSS o un cambio en su opacidad. Por eso algunos programadores aplican las propiedades <code>translateZ(0)</code> o <code>translate3d(0,0,0)</code> como truco para forzar la creación de una nueva capa para ese elemento. Forzar la creación de capas asegura que la capa estará lista tan pronto como empiece la animación y que sus contenidos no se verán afectados por los cambios en el <em>antialiasing</em>. A pesar de sus ventajas, es recomendable no utilizar en exceso el truco de forzar la creación de las capas.</p>
<p>Al modificar el valor de la propiedad <code>transform</code> sobre un elemento, se modifica su posición, su rotación o su escala. Normalmente la posición del elemento se modifica con las propiedades <code>left</code> y <code>top</code>. El problema de esta técnica, tal y como se mostró anteriormente, es que penaliza el rendimiento de la página. Para mover un elemento, lo mejor es usar el valor <code>translate</code> de la propiedad <code>transform</code>, ya que no obliga a recalcular el <em>layout</em> de los elementos de la página.</p>
<h2>Animaciones <em>imperativas</em> frente a animaciones <em>declarativas</em></h2>
<p>Los diseñadores a menudo tienen que decidir entre animar los elementos de la página con JavaScript (se denomina, estilo <em>imperativo</em>) o con CSS (estilo <em>declarativo</em>). Cada uno de los dos métodos tiene sus ventajas e inconvenientes.</p>
<h3>Estilo <em>imperativo</em></h3>
<p>Paradójicamente, la principal ventaja de JavaScript es a la vez su mayor desventaja: todo el código JavaScript se ejecuta en el principal <em>hilo de ejecución</em> del navegador. El problema es que este <em>hilo de ejecución</em> ya está ocupado con muchas otras tareas relacionadas con JavaScript y con el cálculo de los estilos, por lo que es común que se produzcan <em>atascos</em> y por tanto, que las animaciones de la página no sean fluidas.</p>
<p>Las animaciones con JavaScript permiten un control absoluto sobre el comienzo de la animación, su finalización, cancelación, pausa, etc. Además, algunos efectos avanzados como el <em>scroll parallax</em> solamente son posibles con JavaScript.</p>
<h3>Estilo <em>declarativo</em></h3>
<p>La alternativa a JavaScript consiste en crear las animaciones y las transiciones directamente con CSS. La principal ventaja de este método es que el navegador puede optimizar la animación. Entre otras optimizaciones, el navegador crea todas las capas que sean necesarias y realiza los cálculos fuera del <em>hilo de ejecución</em> principal. La desventaja de las animaciones CSS es que no son tan expresivas como las creadas con JavaScript. Además, no resulta fácil combinar dos o más animaciones, por lo que suelen producirse errores al crear animaciones muy complejas.</p>
<h3>Un vistazo al futuro</h3>
<p>Como los estándares web evolucionan tan rápidamente, es seguro que pronto desaparecerán todas estas limitaciones con las animaciones y los efectos gráficos. De hecho, el programador Ian Vollick, de la empresa Google, ha realizado <a href="https://github.com/ianvollick/animation-proxy/blob/master/Explainer.md">una propuesta</a> para que las animaciones JavaScript básicas (las que no necesitan recalcular <em>layouts</em>) se ejecuten mediante <em>workers</em>, en vez de mediante el <em>hijo de ejecución</em> principal.</p>
<p>Por último, se ha creado la <a href="http://dev.w3.org/fxtf/web-animations/">especificación Web Animations</a> para aquellos diseñadores que prefieren el estilo <em>declarativo</em>. El diseñador Jake Archibald ha escrito <a href="http://coding.smashingmagazine.com/2013/03/04/animating-web-gonna-need-bigger-api/">algún artículo</a> sobre el tema.</p>
<h2>En resumen</h2>
<p>Saber animar correctamente los elementos de una página es esencial para crear una buena experiencia de usuario. Siempre que sea posible, evita el uso de propiedades que obligan a recalcular el <em>layout</em> de los elementos o a repintarlos. Resulta mucho mejor animar los elementos mediante transformaciones CSS en vez de mediante código JavaScript, ya que así el navegador puede optimizar esas animaciones.</p>
<p>Hoy en día, la propiedad <code>transform</code> es la mejor forma de crear animaciones y efectos gráficos, ya que la GPU ayuda en todo el procesamiento gráfico. Si es posible, limita los efectos gráficos de tu sitio o aplicación web a <code>opacity</code>, <code>translate</code>, <code>rotate</code> y <code>scale</code>.</p>
<p>En un futuro no muy lejano, es posible que se creen nuevas formas de animar elementos que sean tan expresivas como JavaScript (pero sin penalizar tanto el rendimiento) y tan optimizadas como CSS (pero sin sus restricciones). Hasta ese momento, optimiza al máximo las animaciones para proporcionar una experiencia de usuario excelente.</p>
<h2> Recursos útiles</h2>
<ul>
<li><a href="http://www.chromestatus.com/metrics/css/animated">The current status of animated properties on the web</a></li>
<li>Presentación de Paul Irish sobre <a href="https://docs.google.com/a/google.com/presentation/d/19R_E5B__kdE55L1bTpS6IFKbYbHq-PQKKky4do5Yc6A/edit#slide=id.g105c64d69_170">herramientas para medir el rendimiento en el navegador</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/internals/antialiasing-101/">Introduction to Antialiasing</a></li>
<li><a href="http://coding.smashingmagazine.com/2013/03/04/animating-web-gonna-need-bigger-api/">We’re Gonna Need A Bigger API!</a></li>
</ul>
<hr />
<p><em>Este tutorial es una traducción del artículo <a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/">High Performance Animations</a> realizada de acuerdo a la licencia del contenido original.</em></p>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/como-mejorar-el-rendimiento-de-las-animaciones-con-css/</guid>
        <pubDate>Wed, 13 Nov 2013 00:00:00 +0100</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[css]]></category>
                    <category><![CDATA[rendimiento]]></category>
            </item>
        <item>
        <title><![CDATA[ Preparando tus bocetos sin el Lorem Ipsum ]]></title>
        <link>http://librosweb.es/tutorial/preparando-tus-bocetos-sin-el-lorem-ipsum/</link>
        <description><![CDATA[
            <p>En el ámbito del diseño gráfico, cuando no se dispone de los contenidos definitivos, se utiliza el siguiente texto de relleno para preparar los bocetos, <em>wireframes</em> y prototipos:</p>
<pre class="code code">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</pre>
<p>Este texto de relleno, conocido popularmente como <em>"Lorem Ipsum"</em>, es en realidad un texto artificial creado a partir de la obra <em><a href="http://la.wikisource.org/wiki/De_finibus_bonorum_et_malorum/Liber_Primus">De finibus bonorum et malorum</a></em> publicada hace más de 20 siglos por el famoso orador romano <a href="http://es.wikipedia.org/wiki/Cicer%C3%B3n">Cicerón</a>.</p>
<p>El problema del texto <em>Lorem Ipsum</em> es que, cuando se lo enseñas a una persona que no está acostumbrada a verlo, le cuesta mucho olvidarse del texto para centrarse solamente en su aspecto.</p>
<p>Harto de perder el tiempo con las distracciones del <em>Lorem Ipsum</em>, el diseñador <a href="http://christiannaths.com/">Christian Naths</a> decidió crear una tipografía muy especial para utilizarla en sus bocetos y <em>wireframes</em>. Esta tipografía se llama <em>Redacted Script</em> y define tres variantes (normal, fina y negrita). La siguiente imagen muestra por qué es una tipografía tan especial:</p>
<p><img alt="Aspecto de la tipografía Redacted Script y su comparación con la Helvetica" src="http://librosweb.es/img/tutoriales/redacted_script_specimen.png" /></p>
<p>La tipografía <em>Redacted Script</em> dibuja cada carácter como si fuera el trazo de un garabato escrito a mano. De esta forma, los bloques de texto siguen mostrando su aspecto correcto, pero no permiten distraerse leyendo sus contenidos:</p>
<p><img alt="Bloque de texto que utiliza la tipografía Redacted Script" src="http://librosweb.es/img/tutoriales/redacted_script_bloque_texto.png" /></p>
<p>Como esta técnica se basa en una simple tipografía, puedes crear tus diseños con el tradicional texto <em>Lorem Ipsum</em> y después cambiar su aspecto simplemente modificando la tipografía base de la página:</p>
<pre class="css code"><span class="coMULTI">/* diseño normal de la página */</span>
body <span class="br0">&#123;</span>
    <span class="kw1">font-family</span><span class="sy0">:</span> <span class="st0">&quot;Helvetica Neue&quot;</span><span class="sy0">,</span> Arial<span class="sy0">,</span> <span class="kw2">sans-serif</span><span class="sy0">;</span>
    <span class="kw1">font-size</span><span class="sy0">:</span> <span class="re3">16px</span><span class="sy0">;</span>
    <span class="kw1">line-height</span><span class="sy0">:</span> <span class="nu0">1.5</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* diseño de la página con aspecto de boceto */</span>
body <span class="br0">&#123;</span>
    <span class="kw1">font-family</span><span class="sy0">:</span> <span class="st0">&quot;Redacted Script&quot;</span><span class="sy0">,</span> <span class="st0">&quot;Helvetica Neue&quot;</span><span class="sy0">,</span> Arial<span class="sy0">,</span> <span class="kw2">sans-serif</span><span class="sy0">;</span>
    <span class="kw1">font-size</span><span class="sy0">:</span> <span class="re3">18px</span><span class="sy0">;</span>
    <span class="kw1">line-height</span><span class="sy0">:</span> <span class="nu0">1.2</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>
<p>Debido a las características de la fuente, para mejorar el aspecto del boceto se recomienda aumentar ligeramente el tamaño de fuente y reducir su interlineado, tal y como hace el ejemplo anterior. Aplicando por ejemplo estos estilos a la portada de <a href="http://librosweb.es">librosweb.es</a> el resultado es el siguiente:</p>
<p><img alt="Portada de librosweb con la tipografía Redacted Script" src="http://librosweb.es/img/tutoriales/redacted_script_web_completa.png" /></p>
<p>Esta técnica también es muy útil para mostrar diseños sin desvelar información confidencial sobre un sitio web. Imagina que estás preparando una nueva sección en tu sitio web. Aplicando la fuente <em>Redacted Script</em> puedes pedir la opinión de otros diseñadores sin desvelar ni el nombre ni el contenido de esa nueva sección.</p>
<p>La fuente <em>Redacted Script</em> se puede <strong>descargar gratuitamente</strong> desde el sitio <a href="https://github.com/christiannaths/Redacted-Font">github.com/christiannaths/Redacted-Font</a> y se publica bajo una licencia libre de tipo <em>SIL Open Font License</em>, por lo que no tendrás ningún problema para utilizarla en tus proyectos.</p>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/preparando-tus-bocetos-sin-el-lorem-ipsum/</guid>
        <pubDate>Tue, 08 Oct 2013 00:00:00 +0200</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[html]]></category>
                    <category><![CDATA[css]]></category>
            </item>
        <item>
        <title><![CDATA[ shame.css, el CSS de la vergüenza ]]></title>
        <link>http://librosweb.es/tutorial/shamecss-el-css-de-la-verguenza/</link>
        <description><![CDATA[
            <p>Cuando mantienes las hojas de estilo CSS de un sitio web grande o complejo, resulta habitual encontrarse con problemas relacionados con la especificidad de los selectores. Con las prisas del día a día, la solución más sencilla suele ser añadir el modificador <code>!important</code> para que se apliquen los estilos correctos y esperar a tener tiempo algún día para solucionar bien el problema.</p>
<p>Si tus hojas de estilos tienen muchos <code>!important</code> y también tienen estilos como <code>overflow: hidden</code> o incluso <code>display: none</code>, es <strong>señal de que no estás haciendo del todo bien tu trabajo</strong>. Como no es realista pensar que siempre tendremos tiempo de hacer bien nuestro trabajo, la mejor solución consiste en gestionar bien estas <em>chapuzas</em>, en vez de disimularlas.</p>
<p>La propuesta del diseñador <a href="http://twitter.com/csswizardry">Harry Roberts</a> pretende solucionar estos problemas de una manera sencilla y sorprendente. En vez de disimular todas estas <em>chapuzas</em>, Harry propone agruparlas en un único archivo CSS llamado <code>shame.css</code> (<em>shame</em> significa <em>vergüenza</em> en inglés).</p>
<p>Siempre que tengas que hacer una pequeña <em>chapuza</em> para arreglar rápidamente algún estilo de tu sitio, añade esas nuevas reglas al final del archivo <code>shame.css</code> e incluye también una explicación de por qué es necesario ese estilo y qué error está corrigiendo. Ejemplo:</p>
<pre class="css code"><span class="coMULTI">/**
 * Error en el estado :hover de los enlaces del menú lateral.
 *
 * Alguien ha utilizado el modificador !important en el estilo
 * del estado :hover de los enlaces del lateral:
 *
 *   #lateral a:hover { color: #CC1414 !important; }
 *
 * El problema es que el menú del lateral tiene un color de fondo
 * parecido, por lo que al pasar el ratón por encima, los enlaces
 * desaparecen. Así que como solución provisional se añade el
 * !important al estado :hover de los enlaces del menú lateral.
 */</span>
<span class="re0">#lateral</span> ul<span class="re1">.menu</span> a<span class="re2">:hover </span><span class="br0">&#123;</span>
    <span class="kw1">color</span><span class="sy0">:</span> <span class="re0">#FFF</span> !important<span class="sy0">;</span>
<span class="br0">&#125;</span></pre>
<p>Las ventajas de este método son evidentes:</p>
<ul>
<li>Las <em>chapuzas</em> no ensucian los archivos CSS principales del sitio web.</li>
<li>Al estar todas las <em>chapuzas</em> agrupadas en un mismo archivo, es mucho más fácil solucionarlas sin dejar rastros por varios archivos CSS del sitio.</li>
<li>Ayuda a crear un historial de todos los errores del diseño.</li>
<li>De un solo vistazo permite estimar el tiempo que costaría solucionar los errores del diseño del sitio.</li>
</ul>
<p>Para no herir el orgullo de tu equipo de diseño y para no desvelar públicamente esta información, lo ideal es que el servidor de producción agrupe automáticamente este archivo <code>shame.css</code> con el resto de archivos CSS del sitio y que elimine también automáticamente sus comentarios.</p>
            ]]></description>
        <guid isPermaLink="false">http://librosweb.es/tutorial/shamecss-el-css-de-la-verguenza/</guid>
        <pubDate>Fri, 27 Sep 2013 00:00:00 +0200</pubDate>
                    <category><![CDATA[diseño]]></category>
                    <category><![CDATA[css]]></category>
            </item>

    </channel>
</rss>
